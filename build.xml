<project xmlns:ivy="antlib:org.apache.ivy.ant" name="project-oriented-ide" default="dist" basedir=".">
  
	<description>Unitex/GramLab Project-oriented IDE build file</description>

	<!-- set global properties for this build -->
	<property name="src" location="src" />
	<property name="build" location="build" />
  <property name="classes" location="classes" />
	<property name="dist" location="dist" />
	<property name="lib" location="lib" />
	<property name="resources" location="resources" />
  <property environment="env" />
	<!-- targets -->
	<target name="init">
    <!-- Classic IDE init-->
    <subant target="init">
      <property name="basedir"  value="unitex"/>
      <property name="dist-dir" value="${dist}"/>
      <fileset dir="unitex" includes="build.xml"/>
    </subant>
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}" />
	</target>

	<target name="clean" description="clean up">
    <!-- Classic IDE clean-->
    <subant target="clean">
      <property name="basedir" value="unitex"/>
      <fileset dir="unitex" includes="build.xml"/>
    </subant>

		<echo message="Deleting files in ${build}" level="info" />
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${build}" includes="**/*" />
		</delete>
    <delete dir="${build}" />
    
		<echo message="Deleting files in ${classes}" level="info" />
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${classes}" includes="**/*" />
		</delete>
    <delete dir="${classes}" />
    
		<echo message="Deleting files in ${dist}" level="info" />
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${dist}" includes="**/*" />
		</delete>
    <delete dir="${dist}" />
	</target>  

	<target name="compile" depends="init" description="compile the source">
    <!-- Classic IDE dist-->
    <subant target="dist">
      <property name="basedir" value="unitex"/>
      <property name="dist-dir" value="${dist}"/>
      <fileset dir="unitex" includes="build.xml"/>
    </subant>
		<!-- Compile the java code from ${src} into ${build} -->
		<echo message="classpaht=${dist}/Unitex.jar"/>
		<javac target="1.6" source="1.6" srcdir="${src}" destdir="${build}" classpath="${dist}/Unitex.jar" includeAntRuntime="false"/>
	</target>


	<target name="dist" depends="compile" description="generate the distribution">    
    <!-- Classic IDE dist-->
    <subant target="dist">
      <property name="basedir" value="unitex"/>
      <property name="dist-dir" value="${dist}"/>
      <fileset dir="unitex" includes="build.xml"/>
    </subant>
    
		<mkdir dir="${classes}" />
		<copy todir="${classes}">
			<fileset dir="src/main/resources" />
		</copy>
		<copy todir="${classes}">
			<fileset dir="${build}" />
		</copy>

    <!-- Create the distribution directory -->
		<mkdir dir="${dist}" />
    <!-- create Gramlab.jar -->
		<jar jarfile="${dist}/Gramlab.jar" manifest="${classes}/fr/gramlab/Manifest.mf" basedir="${classes}" />

	</target>

  <target name="install-init">	
		<fail unless="env.UNITEX_BUILD_RELEASE_DIR" message="UNITEX_BUILD_RELEASE_DIR is not set. try `export UNITEX_BUILD_RELEASE_DIR=.`"/>
    <property name="unitexHome" value="${env.UNITEX_BUILD_RELEASE_DIR}"/>		
		<property name="app" location="${unitexHome}/App" />
		<property name="app-lib" location="${unitexHome}/App/lib" />
	</target>

	<!-- Run this sample with ant checkstyle and you will recieve checkstyle_report.xml 
     file with one violation of ReturnNullInsteadOfBoolean check -->
<!-- ##########################################################################
     ####################### target: checkstyle ###############################
     ########################################################################## -->
<target name="checkstyle"
        description="Generates a report of code convention violations."
	depends="init-checkstyle">
  <!-- See http://checkstyle.sourceforge.net/anttask.html for full options of using checkstyle with ant-->
  <checkstyle config="checkstyle.xml"
              failureProperty="checkstyle.failure"
              failOnViolation="false">
    <formatter type="xml" tofile="checkstyle_report.xml"/>
    <fileset dir="src" includes="**/*.java"/>
    <fileset dir="unitex" includes="**/*.java">
  </checkstyle>
</target>

<target name="init-checkstyle" depends="resolve">
	<path id="checkstyle.lib.path">
            <fileset dir="lib" includes="*.jar"/>
	</path>
	<!-- Sevntu custom checks are retrieved by Ivy into lib folder and will be accessible to checkstyle-->
	<taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpathref="checkstyle.lib.path"/>
</target>


<!-- ##########################################################################
     ####################### target: resolve ##################################
     ########################################################################## -->
    <target name="resolve" description="retrieve dependencies with ivy" depends="init-ivy">
    	<ivy:settings file="ivysettings.xml" />
        <ivy:retrieve />    	
    </target>


<!-- ##########################################################################
     ####### Downloading and setup Ivy for managing dependencies ##############
     ##########################################################################-->
    <property name="ivy.install.version" value="2.1.0-rc2" />
    <!-- You may place ivy.jar into other folder if you want to keep folder lib clean-->
    <property name="ivy.jar.dir" value="lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <target name="download-ivy" unless="offline">

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
      <!-- try to load ivy here from ivy home, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>

        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

	<target name="install" depends="install-init,dist, checkstyle">
		<copy todir="${app}">
			<fileset dir="${dist}" />
			<fileset dir="${resources}">
				<include name="*.ico" />
			</fileset>			
		</copy>
		<copy todir="${app-lib}">
			<fileset dir="${lib}">
				<include name="*.jar" />
			</fileset>
		</copy>		
	</target>
</project>

